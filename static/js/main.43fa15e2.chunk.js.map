{"version":3,"sources":["components/toolbar.js","components/control_panel.js","utils/common.js","components/rectangle.js","components/grid_lines.js","components/plot_layout.js","App.js","reportWebVitals.js","index.js"],"names":["ToolBar","_ref","theme","updateColor","_useState","useState","_useState2","Object","slicedToArray","pWallColor","setPWallColor","_useState3","_useState4","bWallColor","setBWallColor","useEffect","console","log","react_default","a","createElement","ThemeProvider","CssBaseline","Box","sx","flexGrow","AppBar","position","Toolbar","disableGutters","Typography","variant","component","display","lib_default","name","value","onChange","color","ControlPanel","props","updateCallback","objectSpread","metrics","setMetrics","controlPanel","id","title","plotLength","ft","in","plotBreadth","pWallTkn","gap","roomLength","roomBreadth","bWallTkn","updateMeasurements","event","_id$split","split","_id$split2","metric","unit","unitUpdate","defineProperty","parseInt","target","metricUpdate","List","className","subheader","ListSubheader","map","control","index","_control","ftCtr","inCtr","ListItem","key","TextField","assign","required","type","InputProps","style","width","padding","fontSize","marginRight","endAdornment","InputAdornment","size","unitConversion","metricUnits","result","keys","Math","round","parseFloat","Rectangle","plotProps","builtupProps","isSelected","onSelect","layoutRef","React","useRef","trRef","current","setNode","getLayer","batchDraw","Fragment","ReactKonva","onClick","ref","onTransformEnd","e","node","scaleX","scaleY","x","y","height","GridLines","window","innerWidth","innerHeight","toConsumableArray","Array","floor","i","concat","points","stroke","strokeWidth","PlotLayout","config","draggable","plots","setPlots","rooms","setRooms","_useState5","_useState6","selectShape","updatedPlot","updatedRoom","stageEl","createRef","layerEl","onMouseDown","getStage","onWheel","stageRef","evt","preventDefault","stage","oldScale","_stage$getPointerPosi","getPointerPosition","pointerX","pointerY","mousePointTo","newScale","deltaY","scale","newPos","zoomStage","grid_lines","plot","rectangle","newAttrs","rects","slice","darkTheme","createTheme","palette","primary","main","secondary","mode","App","defaultConfig","convertedUnits","units","setUnits","toolbar","data","plot_layout","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"4UAkDeA,EA5CC,SAAHC,GAA+B,IAAzBC,EAAKD,EAALC,MAAOC,EAAWF,EAAXE,YAAWC,EAEGC,mBAAS,WAAUC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAhDK,EAAUH,EAAA,GAAEI,EAAaJ,EAAA,GAAAK,EACIN,mBAAS,WAAUO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAhDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAOhC,OALAG,oBAAU,WACNC,QAAQC,IAAI,cAAeR,EAAYI,GACvCV,EAAYM,EAAYI,IACzB,CAACJ,EAAYI,IAGhBK,EAAAC,EAAAC,cAACC,EAAA,EAAa,CAACnB,MAAOA,GACtBgB,EAAAC,EAAAC,cAACE,EAAA,EAAW,MACVJ,EAAAC,EAAAC,cAACG,EAAA,EAAG,CAACC,GAAI,CAAEC,SAAU,IACnBP,EAAAC,EAAAC,cAACM,EAAA,EAAM,CAACC,SAAS,UACfT,EAAAC,EAAAC,cAACQ,EAAA,EAAO,CAACC,gBAAc,GACrBX,EAAAC,EAAAC,cAACU,EAAA,EAAU,CAACC,QAAQ,OAAOC,UAAU,MAAMR,GAAI,CAAEC,SAAU,IAAI,eAG/DP,EAAAC,EAAAC,cAACG,EAAA,EAAG,CAACC,GAAI,CAAEC,SAAU,EAAGQ,QAAS,SAC7Bf,EAAAC,EAAAC,cAACU,EAAA,EAAU,CAACC,QAAQ,OAAOC,UAAU,MAAMR,GAAI,IAAK,oBAGpDN,EAAAC,EAAAC,cAACc,EAAAf,EAAW,CACRgB,KAAK,aACLC,MAAO3B,EACP4B,SAAU,SAAAC,GAAK,OAAI5B,EAAc4B,MAErCpB,EAAAC,EAAAC,cAACU,EAAA,EAAU,CAACC,QAAQ,OAAOC,UAAU,MAAMR,GAAI,IAAK,uBAGpDN,EAAAC,EAAAC,cAACc,EAAAf,EAAW,CACRgB,KAAK,gBACLC,MAAOvB,EACPwB,SAAU,SAAAC,GAAK,OAAIxB,EAAcwB,gECnCtC,SAASC,EAAYtC,GAAoC,IAAhCuC,EAAKvC,EAALuC,MAAOtC,EAAKD,EAALC,MAAOuC,EAAcxC,EAAdwC,eAAcrC,EAClCC,mBAASE,OAAAmC,EAAA,EAAAnC,CAAA,GAAKiC,IAAQlC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA7CuC,EAAOrC,EAAA,GAAEsC,EAAUtC,EAAA,GAEpBuC,EAAe,CACjB,CAAC,CACGC,GAAI,gBACJC,MAAO,cACPX,MAAOO,EAAQK,WAAWC,IAG9B,CACIH,GAAI,gBACJV,MAAOO,EAAQK,WAAWE,KAG9B,CAAC,CACGJ,GAAI,iBACJC,MAAO,eACPX,MAAOO,EAAQQ,YAAYF,IAG/B,CACIH,GAAI,iBACJV,MAAOO,EAAQQ,YAAYD,KAG/B,CAAC,CACGJ,GAAI,cACJC,MAAO,sBACPX,MAAOO,EAAQS,SAASH,IAG5B,CACIH,GAAI,cACJV,MAAOO,EAAQS,SAASF,KAG5B,CAAC,CACGJ,GAAI,SACJC,MAAO,cACPX,MAAOO,EAAQU,IAAIJ,IAGvB,CACIH,GAAI,SACJV,MAAOO,EAAQU,IAAIH,KAGvB,CAAC,CACGJ,GAAI,gBACJC,MAAO,kBACPX,MAAOO,EAAQW,WAAWL,IAG9B,CACIH,GAAI,gBACJV,MAAOO,EAAQW,WAAWJ,KAG9B,CAAC,CACGJ,GAAI,iBACJC,MAAO,mBACPX,MAAOO,EAAQY,YAAYN,IAG/B,CACIH,GAAI,iBACJV,MAAOO,EAAQY,YAAYL,KAG/B,CAAC,CACGJ,GAAI,cACJC,MAAO,yBACPX,MAAOO,EAAQa,SAASP,IAG5B,CACIH,GAAI,cACJV,MAAOO,EAAQa,SAASN,MAK1BO,EAAqB,SAACC,EAAOZ,GAAQ,IAAAa,EAChBb,EAAGc,MAAM,KAAIC,EAAAtD,OAAAC,EAAA,EAAAD,CAAAoD,EAAA,GAA7BG,EAAMD,EAAA,GAAEE,EAAIF,EAAA,GACbG,EAAUzD,OAAA0D,EAAA,EAAA1D,CAAA,GAAMwD,EAAOG,SAASR,EAAMS,OAAO/B,QAC7CgC,EAAY7D,OAAAmC,EAAA,EAAAnC,CAAA,GAAQoC,EAAQmB,GAAYE,GAC9CpB,EAAWrC,OAAAmC,EAAA,EAAAnC,CAAA,GAAKoC,EAAQpC,OAAA0D,EAAA,EAAA1D,CAAA,GAAEuD,EAASM,KACnCpD,QAAQC,IAAI,iBAAkByC,EAAOZ,GACrC9B,QAAQC,IAAI,OAAQ0B,GACpBF,EAAeiB,EAAOZ,EAAIH,IAQ9B,OACIzB,EAAAC,EAAAC,cAACC,EAAA,EAAa,CAACnB,MAAOA,GAClBgB,EAAAC,EAAAC,cAACE,EAAA,EAAW,MACZJ,EAAAC,EAAAC,cAACiD,EAAA,EAAI,CAACC,UAAU,eACZC,UACArD,EAAAC,EAAAC,cAACoD,EAAA,EAAa,CAACxC,UAAU,MAAMc,GAAG,yBAAuB,kBAIxDD,EAAa4B,IAAI,SAACC,EAASC,GAAU,IAAAC,EAAArE,OAAAC,EAAA,EAAAD,CACTmE,EAAO,GAAxBG,EAAKD,EAAA,GAAEE,EAAKF,EAAA,GACpB,OACA1D,EAAAC,EAAAC,cAAC2D,EAAA,EAAQ,CAACT,UAAU,qBAAqBU,IAAKH,EAAM/B,IACpD5B,EAAAC,EAAAC,cAACU,EAAA,EAAU,CAACC,QAAQ,SACf8C,EAAM9B,OAEX7B,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,iBACfpD,EAAAC,EAAAC,cAAC6D,EAAA,EAAS1E,OAAA2E,OAAA,GACFL,EAAK,CACTM,UAAQ,EACRH,IAAKH,EAAM/B,GACXsC,KAAK,SACLC,WAAY,CACRC,MAAO,CAAEC,MAAO,OAAQC,QAAS,EAAGC,SAAU,UAAWC,YAAa,OACtEC,aAAczE,EAAAC,EAAAC,cAACwE,EAAA,EAAc,CAACjE,SAAS,QAAQ2D,MAAO,CAACG,SAAU,YAAW,OAEhFI,KAAK,QACL9D,QAAQ,WACRM,SAAU,SAACqB,GAAK,OAAKD,EAAmBC,EAAOmB,EAAM/B,QAEzD5B,EAAAC,EAAAC,cAAC6D,EAAA,EAAS1E,OAAA2E,OAAA,GACFJ,EAAK,CACTK,UAAQ,EACRH,IAAKF,EAAMhC,GACXsC,KAAK,SACLC,WAAY,CACRC,MAAO,CAAEC,MAAO,OAAQC,QAAS,EAAGC,SAAU,UAAWC,YAAa,OACtEC,aAAczE,EAAAC,EAAAC,cAACwE,EAAA,EAAc,CAACjE,SAAS,QAAQ2D,MAAO,CAACG,SAAU,YAAW,OAEhFI,KAAK,QACL9D,QAAQ,WACRM,SAAU,SAACqB,GAAK,OAAKD,EAAmBC,EAAOoB,EAAMhC,0BC5IvEgD,EAAiB,SAACC,GACpB,IAAMC,EAAS,GAKf,OAJAzF,OAAO0F,KAAKF,GAAatB,IAAI,SAAAO,GACzB,IAAM5C,EAAQ2D,EAAYf,GAC1BgB,EAAOhB,GAAOkB,KAAKC,MAPb,IAOoBC,WAAWhE,EAAMa,IAAMmD,WAAWhE,EAAMc,GAAG,KAAc,KAEhF8C,GCwCIK,EA/CG,SAAHpG,GAAoE,IAA9DqG,EAASrG,EAATqG,UAAWC,EAAYtG,EAAZsG,aAAcC,EAAUvG,EAAVuG,WAAYC,EAAQxG,EAARwG,SAAUpE,EAAQpC,EAARoC,SAE1DqE,EAAYC,IAAMC,SAClBC,EAAQF,IAAMC,SASpB,OAPAD,IAAM5F,UAAU,WACRyF,IAEJK,EAAMC,QAAQC,QAAQL,EAAUI,SAChCD,EAAMC,QAAQE,WAAWC,cAE1B,CAACT,IAEAtF,EAAAC,EAAAC,cAACF,EAAAC,EAAM+F,SAAQ,KACXhG,EAAAC,EAAAC,cAAC+F,EAAA,EAAK5G,OAAA2E,OAAA,GACEoB,EAAS,CACbc,QAASX,EACTY,IAAKX,EACLY,eAAgB,SAAAC,GAEZ,IAAMC,EAAOd,EAAUI,QACjBW,EAASD,EAAKC,SACdC,EAASF,EAAKE,SACpBF,EAAKC,OAAO,GACZD,EAAKE,OAAO,GACZrF,EAAS9B,OAAAmC,EAAA,EAAAnC,CAAA,GACF+F,EAAS,CACZqB,EAAGH,EAAKG,IACRC,EAAGJ,EAAKI,IACRrC,MAAOiC,EAAKjC,QAAUkC,EACtBI,OAAQL,EAAKK,SAAWH,QAKhCxG,EAAAC,EAAAC,cAAC+F,EAAA,EACOb,GAERpF,EAAAC,EAAAC,cAAC+F,EAAA,EACOZ,IAGXC,GAActF,EAAAC,EAAAC,cAAC+F,EAAA,EAAW,CAACE,IAAKR,cCL9BiB,EArCG,WAChB,IACMvC,EAAQwC,OAAOC,WACfH,EAASE,OAAOE,YAEtB,OACE/G,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+F,SAAA,KACAhG,EAAAC,EAAAC,cAAC+F,EAAA,EAAK,KACD5G,OAAA2H,EAAA,EAAA3H,CAAI4H,MAAMjC,KAAKkC,MAAM7C,EAPV,MAO6Bd,IAAI,SAACkD,EAAGU,GAC/C,OACEnH,EAAAC,EAAAC,cAAC+F,EAAA,EAAI,CACHnC,IAAG,KAAAsD,OAAOD,GACVE,OAAQ,CAACrC,KAAKC,MAXR,GAWckC,GAAiB,GAAK,EAAGnC,KAAKC,MAX5C,GAWkDkC,GAAiB,GAAK,EAAER,GAChFW,OAAO,YACPC,YAAa,OAMvBvH,EAAAC,EAAAC,cAAC+F,EAAA,EAAK,KACH5G,OAAA2H,EAAA,EAAA3H,CAAI4H,MAAMjC,KAAKkC,MAAMP,EApBR,MAoB4BpD,IAAI,SAACkD,EAAGU,GAChD,OACEnH,EAAAC,EAAAC,cAAC+F,EAAA,EAAI,CACHnC,IAAG,KAAAsD,OAAOD,GACVE,OAAQ,CAAC,EAAGrC,KAAKC,MAxBT,GAwBekC,GAAgB,EAAE9C,EAAOW,KAAKC,MAxB7C,GAwBmDkC,IAC3DG,OAAO,YACPC,YAAa,SC8DVC,EApFI,SAAHzI,GAAmB,IAAb0I,EAAM1I,EAAN0I,OAIJvI,EAEYC,mBAAS,CAAC,CAChCsH,EALY,IAMZC,EALY,GAMZrC,MAAOoD,EAAO3F,WACd6E,OAAQc,EAAOxF,YACfqF,OAAQG,EAAOlI,YAAc,UAC7BgI,YAAaE,EAAOvF,SACpBN,GAAE,OAAAwF,OAAS,GACXM,WAAW,KACVtI,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GATEyI,EAAKvI,EAAA,GAAEwI,EAAQxI,EAAA,GAAAK,EAUIN,mBAAS,CAAC,CAChCsH,EAfY,IAeDgB,EAAOtF,IAClBuE,EAfY,GAeDe,EAAOtF,IAClBkC,MAAOoD,EAAO3F,WAAW2F,EAAOtF,IAChCwE,OAAQc,EAAOxF,YAAYwF,EAAOtF,IAClCmF,OAAQG,EAAO9H,YAAc,UAC7B4H,YAAaE,EAAOnF,SACpBV,GAAE,OAAAwF,OAAS,GACXM,WAAW,KACVhI,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GATEoI,EAAKnI,EAAA,GAAEoI,EAAQpI,EAAA,GAAAqI,EAUY5I,mBAAS,MAAK6I,EAAA3I,OAAAC,EAAA,EAAAD,CAAA0I,EAAA,GAA7BE,GAAFD,EAAA,GAAaA,EAAA,IAC9BnI,oBAAU,WACN,IAAMqI,EAAc,CAAC7I,OAAAmC,EAAA,EAAAnC,CAAA,GAAKsI,EAAM,GAAE,CAC9BtD,MAAOoD,EAAO3F,WACd6E,OAAQc,EAAOxF,YACfsF,YAAaE,EAAOvF,YACxB0F,EAASM,GAET,IAAMC,EAAc,CAAC9I,OAAAmC,EAAA,EAAAnC,CAAA,GAAKwI,EAAM,GAAE,CAC9BxD,MAAOoD,EAAOrF,WACduE,OAAQc,EAAOpF,YACfkF,YAAaE,EAAOnF,YACxBwF,EAASK,IACV,CAACV,IAEJ,IAAMW,EAAU3C,IAAM4C,YAChBC,EAAU7C,IAAM4C,YAGtB,OACIrI,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,eACfpD,EAAAC,EAAAC,cAAC+F,EAAA,EAAK,CACF5B,MAA2B,IAApBwC,OAAOC,WACdH,OAAQE,OAAOE,YAAc,GAC7BZ,IAAKiC,EACLG,YAAa,SAAAlC,GAEcA,EAAEpD,SAAWoD,EAAEpD,OAAOuF,YAEzCP,EAAY,OAGpBQ,QAAS,SAAAjG,GAAK,OHrDR,SAACA,EAAOkG,GAEtB,GADAlG,EAAMmG,IAAIC,iBACe,OAArBF,EAAS9C,QAAkB,CAC7B,IAAMiD,EAAQH,EAAS9C,QACjBkD,EAAWD,EAAMtC,SAASwC,EACKF,EAAMG,qBAAhCC,EAAQF,EAAXtC,EAAgByC,EAAQH,EAAXrC,EACfyC,EAAe,CACnB1C,GAAIwC,EAAWJ,EAAMpC,KAAOqC,EAC5BpC,GAAIwC,EAAWL,EAAMnC,KAAOoC,GAExBM,EAAW5G,EAAMmG,IAAIU,OAAS,EArB1B,KAqB8BP,EAAqBA,EArBnD,KAsBVD,EAAMS,MAAM,CAAE7C,EAAG2C,EAAU1C,EAAG0C,IAC9B,IAAMG,EAAS,CACb9C,EAAGwC,EAAWE,EAAa1C,EAAI2C,EAC/B1C,EAAGwC,EAAWC,EAAazC,EAAI0C,GAEjCP,EAAMpI,SAAS8I,GACfV,EAAM9C,aGoCkByD,CAAUhH,EAAO4F,KAEnCpI,EAAAC,EAAAC,cAACuJ,EAAS,MACVzJ,EAAAC,EAAAC,cAAC+F,EAAA,EAAK,CAACE,IAAKmC,GAEPX,EAAMpE,IAAI,SAACmG,EAAMvC,GACd,OACAnH,EAAAC,EAAAC,cAACyJ,EAAS,CACN7F,IAAKqD,EACL/B,UAAWsE,EACXrE,aAAcwC,EAAMV,GACpBhG,SAAU,SAAAyI,GACN,IAAMC,EAAQlC,EAAMmC,QACpBD,EAAM1C,GAAKyC,EACXhC,EAASiC,YC3D/BE,GAXaC,YAAY,CAC7BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,cAKMH,YAAY,CAC5BC,QAAS,CACPI,KAAM,WAyCKC,EArCH,WACV,IAAMC,EAAgB,CAClBtI,YAAa,CAAEF,GAAI,GAAIC,GAAI,GAC3BF,WAAY,CAAEC,GAAI,GAAIC,GAAI,GAC1BE,SAAU,CAAEH,GAAI,EAAGC,GAAI,GACvBG,IAAK,CAAEJ,GAAI,EAAGC,GAAI,GAClBK,YAAa,CAAEN,GAAI,GAAIC,GAAI,GAC3BI,WAAY,CAAEL,GAAI,GAAIC,GAAI,GAC1BM,SAAU,CAAEP,GAAI,EAAGC,GAAI,IAC1B9C,EAE2BC,mBAASoL,GAAcnL,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA5CuI,EAAMrI,EAAA,GAEPoL,GAFkBpL,EAAA,GAEDwF,EAAe2F,IAAc9K,EAC1BN,mBAASqL,GAAe9K,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAA3CgL,EAAK/K,EAAA,GAAEgL,EAAQhL,EAAA,GAYtB,OACEM,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,OACXpD,EAAAC,EAAAC,cAACyK,EAAO,CAAC3L,MAAO+K,EAAW9K,YAPb,SAACM,EAAYI,GAC/B+K,EAASrL,OAAAmC,EAAA,EAAAnC,CAAA,GAAMoL,EAAK,CAAElL,WAAYA,EAAYI,WAAYA,KAC1DG,QAAQC,IAAI,cAAe0K,MAMvBzK,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,gBACbpD,EAAAC,EAAAC,cAACmB,EAAY,CAACC,MAAOmG,EAAQzI,MAAO+K,EAAWxI,eAdlC,SAACqJ,EAAMhJ,EAAIH,GAC9B,IAAM+I,EAAiB5F,EAAenD,GACtCiJ,EAASF,MAaHxK,EAAAC,EAAAC,cAAC2K,EAAU,CAACpD,OAAQgD,OC9CfK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA5E,EAAA,GAAA6E,KAAAD,EAAAE,KAAA,WAAqBD,KAAK,SAAAnM,GAAiD,IAA9CqM,EAAMrM,EAANqM,OAAQC,EAAMtM,EAANsM,OAAQC,EAAMvM,EAANuM,OAAQC,EAAMxM,EAANwM,OAAQC,EAAOzM,EAAPyM,QAC3DJ,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH7L,EAAAC,EAAAC,cAACF,EAAAC,EAAM6L,WAAU,KACf9L,EAAAC,EAAAC,cAAC6L,EAAG,QAORjB","file":"static/js/main.43fa15e2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ColorPicker from 'material-ui-color-picker'\r\nimport { AppBar, Box, Toolbar, Typography, CssBaseline } from '@mui/material';\r\nimport { ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\nconst ToolBar = ({ theme, updateColor }) => {\r\n\r\n    const [pWallColor, setPWallColor] = useState('#000000');\r\n    const [bWallColor, setBWallColor] = useState('#800000');\r\n\r\n    useEffect(() => {\r\n        console.log('updateColor', pWallColor, bWallColor)\r\n        updateColor(pWallColor, bWallColor)\r\n    }, [pWallColor, bWallColor])\r\n\r\n    return (\r\n    <ThemeProvider theme={theme}>\r\n    <CssBaseline />\r\n      <Box sx={{ flexGrow: 1 }}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar disableGutters>\r\n            <Typography variant=\"span\" component=\"div\" sx={{ flexGrow: 1 }}>\r\n              Plot Layout\r\n            </Typography>\r\n            <Box sx={{ flexGrow: 1, display: 'flex' }}>\r\n                <Typography variant=\"span\" component=\"div\" sx={{  }}>\r\n                  Plot wall color:\r\n                </Typography>\r\n                <ColorPicker\r\n                    name='plot-color'\r\n                    value={pWallColor}\r\n                    onChange={color => setPWallColor(color)}\r\n                />\r\n                <Typography variant=\"span\" component=\"div\" sx={{  }}>\r\n                  Builtup wall color:\r\n                </Typography>\r\n                <ColorPicker\r\n                    name='builtup-color'\r\n                    value={bWallColor}\r\n                    onChange={color => setBWallColor(color)}\r\n                />\r\n            </Box>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Box>\r\n    </ThemeProvider>\r\n    );\r\n  }\r\n\r\nexport default ToolBar;\r\n","import React, { useState } from 'react';\r\nimport { Box, TextField, InputAdornment, ListSubheader,\r\n         List, ListItem, Typography, CssBaseline } from '@mui/material';\r\nimport { ThemeProvider, styled } from \"@mui/material/styles\";\r\n\r\nexport default function ControlPanel ({ props, theme, updateCallback }) {\r\n    const [metrics, setMetrics] = useState({ ...props })\r\n\r\n    const controlPanel = [\r\n        [{\r\n            id: 'plotLength.ft',\r\n            title: 'Plot Length',\r\n            value: metrics.plotLength.ft,\r\n            // helperText: \"Specify length of the plot\"\r\n        },\r\n        {\r\n            id: 'plotLength.in',\r\n            value: metrics.plotLength.in,\r\n            // helperText: \"Specify length of the plot\"\r\n        }],\r\n        [{\r\n            id: \"plotBreadth.ft\",\r\n            title: \"Plot Breadth\",\r\n            value: metrics.plotBreadth.ft,\r\n            // helperText: \"Specify breadth of the plot\"\r\n        },\r\n        {\r\n            id: \"plotBreadth.in\",\r\n            value: metrics.plotBreadth.in,\r\n            // helperText: \"Specify breadth of the plot\"\r\n        }],\r\n        [{\r\n            id: \"pWallTkn.ft\",\r\n            title: \"Plot wall thickness\",\r\n            value: metrics.pWallTkn.ft,\r\n            // helperText: \"Specify length of the plot\"\r\n        },\r\n        {\r\n            id: \"pWallTkn.in\",\r\n            value: metrics.pWallTkn.in,\r\n            // helperText: \"Specify length of the plot\"\r\n        }],\r\n        [{\r\n            id: \"gap.ft\",\r\n            title: \"Setback gap\",\r\n            value: metrics.gap.ft,\r\n            // helperText: \"Leave offsets (setback)\"\r\n        },\r\n        {\r\n            id: \"gap.in\",\r\n            value: metrics.gap.in,\r\n            // helperText: \"Leave offsets (setback)\"\r\n        }],\r\n        [{\r\n            id: \"roomLength.ft\",\r\n            title: \"Built-up Length\",\r\n            value: metrics.roomLength.ft,\r\n            // helperText: \"Specify length of the Builtup Area\"\r\n        },\r\n        {\r\n            id: \"roomLength.in\",\r\n            value: metrics.roomLength.in,\r\n            // helperText: \"Specify length of the Builtup Area\"\r\n        }],\r\n        [{\r\n            id: \"roomBreadth.ft\",\r\n            title: \"Built-up breadth\",\r\n            value: metrics.roomBreadth.ft,\r\n            // helperText: \"Specify breadth of the Builtup Area\"\r\n        },\r\n        {\r\n            id: \"roomBreadth.in\",\r\n            value: metrics.roomBreadth.in,\r\n            // helperText: \"Specify breadth of the Builtup Area\"\r\n        }],\r\n        [{\r\n            id: \"bWallTkn.ft\", \r\n            title: \"Builtup wall thickness\",\r\n            value: metrics.bWallTkn.ft,\r\n            // helperText: \"Specify Builtup wall thickness\"\r\n        },\r\n        {\r\n            id: \"bWallTkn.in\", \r\n            value: metrics.bWallTkn.in,\r\n            // helperText: \"Specify Builtup wall thickness\"\r\n        }],\r\n    ]\r\n\r\n    const updateMeasurements = (event, id,) => {\r\n        const [metric, unit] = id.split('.')\r\n        const unitUpdate = { [unit]: parseInt(event.target.value) }\r\n        const metricUpdate = { ...metrics[metric], ...unitUpdate }\r\n        setMetrics({ ...metrics, [metric]: metricUpdate })\r\n        console.log('updateCallback', event, id)\r\n        console.log('data', metrics)\r\n        updateCallback(event, id, metrics)\r\n        // const value = event.target.value\r\n        // if(id.includes('-in') && value >=12) {\r\n        //     const feetInp = document.getElementById(id.replace('-in', '-ft'))\r\n        //     feetInp.\r\n        // }\r\n      }\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <List className=\"control-list\"\r\n                subheader={\r\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                  Area measures\r\n                </ListSubheader>\r\n              }>\r\n                {controlPanel.map((control, index) => {\r\n                    const [ ftCtr, inCtr ] = control;\r\n                    return (\r\n                    <ListItem className=\"control-list-items\" key={ftCtr.id}>\r\n                    <Typography variant=\"body1\">\r\n                        {ftCtr.title}\r\n                    </Typography>\r\n                    <div className=\"input-metrics\">\r\n                    <TextField \r\n                        {...ftCtr}\r\n                        required\r\n                        key={ftCtr.id}\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                            style: { width: '4rem', padding: 0, fontSize: '0.85rem', marginRight: '5px'},\r\n                            endAdornment: <InputAdornment position=\"start\" style={{fontSize: '0.75rem'}}>ft</InputAdornment>,\r\n                        }}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onChange={(event) => updateMeasurements(event, ftCtr.id)}\r\n                    />\r\n                    <TextField \r\n                        {...inCtr}\r\n                        required\r\n                        key={inCtr.id}\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                            style: { width: '4rem', padding: 0, fontSize: '0.85rem', marginRight: '5px'},\r\n                            endAdornment: <InputAdornment position=\"start\" style={{fontSize: '0.75rem'}}>in</InputAdornment>,\r\n                        }}\r\n                        size=\"small\"\r\n                        variant=\"outlined\"\r\n                        onChange={(event) => updateMeasurements(event, inCtr.id)}\r\n                    />\r\n                    </div>\r\n                    </ListItem>)\r\n                })}\r\n                </List>\r\n        </ThemeProvider>\r\n    );\r\n  }\r\n","\r\nconst scale = 20;\r\nconst scaleBy = 1.01;\r\n\r\nconst unitConversion = (metricUnits) => {\r\n    const result = {};\r\n    Object.keys(metricUnits).map(key => {\r\n        const value = metricUnits[key]\r\n        result[key] = Math.round((parseFloat(value.ft) + parseFloat(value.in/12)) * scale, 2)\r\n    })\r\n    return result;\r\n}\r\n\r\nconst zoomStage = (event, stageRef) => {\r\n    event.evt.preventDefault();\r\n    if (stageRef.current !== null) {\r\n      const stage = stageRef.current;\r\n      const oldScale = stage.scaleX();\r\n      const { x: pointerX, y: pointerY } = stage.getPointerPosition();\r\n      const mousePointTo = {\r\n        x: (pointerX - stage.x()) / oldScale,\r\n        y: (pointerY - stage.y()) / oldScale,\r\n      };\r\n      const newScale = event.evt.deltaY > 0 ? oldScale * scaleBy : oldScale / scaleBy;\r\n      stage.scale({ x: newScale, y: newScale });\r\n      const newPos = {\r\n        x: pointerX - mousePointTo.x * newScale,\r\n        y: pointerY - mousePointTo.y * newScale,\r\n      }\r\n      stage.position(newPos);\r\n      stage.batchDraw();\r\n    }\r\n  }\r\n\r\nexport { unitConversion, zoomStage };\r\n","import React from \"react\";\r\nimport { Rect, Transformer, Group } from \"react-konva\";\r\n\r\nconst Rectangle = ({ plotProps, builtupProps, isSelected, onSelect, onChange }) => {\r\n  \r\n    const layoutRef = React.useRef();\r\n    const trRef = React.useRef();\r\n\r\n    React.useEffect(() => {\r\n        if (isSelected) {\r\n        // we need to attach transformer manually\r\n        trRef.current.setNode(layoutRef.current);\r\n        trRef.current.getLayer().batchDraw();\r\n        }\r\n    }, [isSelected]);\r\n    return (\r\n        <React.Fragment>\r\n            <Group\r\n                {...plotProps}\r\n                onClick={onSelect}\r\n                ref={layoutRef}\r\n                onTransformEnd={e => {\r\n                    // transformer is changing scale\r\n                    const node = layoutRef.current;\r\n                    const scaleX = node.scaleX();\r\n                    const scaleY = node.scaleY();\r\n                    node.scaleX(1);\r\n                    node.scaleY(1);\r\n                    onChange({\r\n                        ...plotProps,\r\n                        x: node.x(),\r\n                        y: node.y(),\r\n                        width: node.width() * scaleX,\r\n                        height: node.height() * scaleY,\r\n                    });\r\n                    }\r\n                }\r\n                >\r\n                <Rect\r\n                    {...plotProps}\r\n                />\r\n                <Rect\r\n                    {...builtupProps}\r\n                />\r\n            </Group>\r\n            {isSelected && <Transformer ref={trRef} />}\r\n        </React.Fragment>\r\n    );\r\n    };\r\n\r\nexport default Rectangle;\r\n","import React from \"react\";\r\nimport { Layer, Line, Stage } from \"react-konva\";\r\n\r\nconst GridLines = () => {\r\n  const blockSize = 20;\r\n  const width = window.innerWidth;\r\n  const height = window.innerHeight;\r\n\r\n  return (\r\n    <>\r\n    <Layer>\r\n        {[...Array(Math.floor(width/blockSize))].map((x, i) => {\r\n          return (\r\n            <Line\r\n              key={`c-${i}`}\r\n              points={[Math.round(i * blockSize) + 0.5, 0, Math.round(i * blockSize) + 0.5, 2*height]}\r\n              stroke='lightblue'\r\n              strokeWidth={1}\r\n            />\r\n          )\r\n        })\r\n        }\r\n    </Layer>\r\n    <Layer>\r\n      {[...Array(Math.floor(height/blockSize))].map((x, i) => {\r\n        return (\r\n          <Line\r\n            key={`r-${i}`}\r\n            points={[0, Math.round(i * blockSize), 2*width, Math.round(i * blockSize)]}\r\n            stroke='lightblue'\r\n            strokeWidth={1}\r\n          />\r\n        )\r\n      })\r\n      }\r\n  </Layer>\r\n  </>\r\n  );\r\n};\r\n\r\nexport default GridLines;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { Stage, Layer } from \"react-konva\";\r\n\r\nimport { zoomStage } from '../utils/common.js'\r\n\r\nimport Rectangle from './rectangle.js';\r\nimport GridLines from './grid_lines.js';\r\n\r\nconst PlotLayout = ({ config }) => {\r\n    const mode = 0; // 0 is static, 1 is dynamic\r\n    const originX = 100;\r\n    const originY = 50;\r\n    let wallWidth;\r\n\r\n    const [plots, setPlots] = useState([{\r\n        x: originX,\r\n        y: originY,\r\n        width: config.plotLength,\r\n        height: config.plotBreadth,\r\n        stroke: config.pWallColor || '#000000',\r\n        strokeWidth: config.pWallTkn,\r\n        id: `plot${1}`,\r\n        draggable: false\r\n      }]);\r\n    const [rooms, setRooms] = useState([{\r\n        x: originX+config.gap,\r\n        y: originY+config.gap,\r\n        width: config.plotLength-config.gap,\r\n        height: config.plotBreadth-config.gap,\r\n        stroke: config.bWallColor || '#800000',\r\n        strokeWidth: config.bWallTkn,\r\n        id: `room${1}`,\r\n        draggable: false\r\n      }]);\r\n    const [selectedId, selectShape] = useState(null);\r\n    useEffect(() => {\r\n        const updatedPlot = [ {...plots[0],\r\n            width: config.plotLength,\r\n            height: config.plotBreadth,\r\n            strokeWidth: config.pWallTkn } ]\r\n        setPlots(updatedPlot)\r\n\r\n        const updatedRoom = [ {...rooms[0],\r\n            width: config.roomLength,\r\n            height: config.roomBreadth,\r\n            strokeWidth: config.bWallTkn } ]\r\n        setRooms(updatedRoom)\r\n    }, [config]);\r\n\r\n    const stageEl = React.createRef();\r\n    const layerEl = React.createRef();\r\n    // console.log('rectangles', config)\r\n    \r\n    return (\r\n        <div className=\"plot-layout\">\r\n        <Stage\r\n            width={window.innerWidth * 0.95}\r\n            height={window.innerHeight - 10}\r\n            ref={stageEl}\r\n            onMouseDown={e => {\r\n                // deselect when clicked on empty area\r\n                const clickedOnEmpty = e.target === e.target.getStage();\r\n                if (clickedOnEmpty) {\r\n                    selectShape(null);\r\n                }\r\n            }}\r\n            onWheel={event => zoomStage(event, stageEl)}\r\n            >\r\n            <GridLines />\r\n            <Layer ref={layerEl}>\r\n                {/* <GridLines /> */}\r\n                {plots.map((plot, i) => {\r\n                    return (\r\n                    <Rectangle\r\n                        key={i}\r\n                        plotProps={plot}\r\n                        builtupProps={rooms[i]}\r\n                        onChange={newAttrs => {\r\n                            const rects = plots.slice();\r\n                            rects[i] = newAttrs;\r\n                            setPlots(rects);\r\n                        }}\r\n                    />\r\n                    );\r\n                })\r\n                }\r\n            </Layer>\r\n        </Stage>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default PlotLayout;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nimport ToolBar from './components/toolbar.js';\nimport ControlPanel from './components/control_panel.js'\nimport PlotLayout from './components/plot_layout.js'\n\nimport { unitConversion } from './utils/common.js'\n\nconst lightTheme = createTheme({\n  palette: {\n    primary: {\n      main: '#0052cc',\n    },\n    secondary: {\n      main: '#edf2ff',\n    },\n  },\n});\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\nconst App = () => {\n  const defaultConfig = {\n      plotBreadth: { ft: 20, in: 0 },\n      plotLength: { ft: 30, in: 0 },\n      pWallTkn: { ft: 0, in: 5 },\n      gap: { ft: 2, in: 0 },\n      roomBreadth: { ft: 16, in: 0 },\n      roomLength: { ft: 26, in: 0 },\n      bWallTkn: { ft: 0, in: 4 },\n  }\n\n  const [config, setConfig] = useState(defaultConfig)\n\n  const convertedUnits = unitConversion(defaultConfig)\n  const [units, setUnits] = useState(convertedUnits)\n\n  const updateConfig = (data, id, metrics) => {\n    const convertedUnits = unitConversion(metrics)\n    setUnits(convertedUnits)\n  };\n\n  const updateColor = (pWallColor, bWallColor) => {\n    setUnits( { ...units, pWallColor: pWallColor, bWallColor: bWallColor } )\n    console.log('updateColor', units)\n  };\n\n  return (\n    <div className=\"App\">\n        <ToolBar theme={darkTheme} updateColor={updateColor}/>\n        <div className='main-section'>\n          <ControlPanel props={config} theme={darkTheme} updateCallback={updateConfig}/>\n          <PlotLayout config={units}/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}